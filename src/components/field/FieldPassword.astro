---
import { scope } from 'simple:scope'
import type { HTMLAttributes } from 'astro/types'
import useId from '../../utils/useId'

interface Props extends HTMLAttributes<'input'> {
	label?: string
	description?: string
}

const { label, description, class: className, ...restProps } = Astro.props

const fieldId = useId(scope())

const labelHtml = Astro.slots.has('label') ? await Astro.slots.render('label') : label

const descriptionHtml = Astro.slots.has('description')
	? await Astro.slots.render('description')
	: description
---

<div class="space-y-2" data-part="field-root">
  {labelHtml && (
    <label
      data-part="field-label"
      for={fieldId}
      class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
    >
      <Fragment set:html={labelHtml} />
    </label>
  )}
  <div class="relative">
    <input
      {...restProps}
      data-part="field-password"
      id={fieldId}
      type="password"
      class:list={[
        'peer flex h-9 w-full rounded-lg border border-input bg-background px-3 py-2 text-sm text-foreground shadow-sm shadow-black/5 transition-shadow placeholder:text-muted-foreground/70 focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] focus-visible:ring-ring/20 disabled:cursor-not-allowed disabled:opacity-50 pe-9 appearance-none [&::-ms-reveal]:hidden',
        className,
      ]}
    />
    <button
      class="absolute inset-y-0 end-0 flex items-center justify-center pe-3 text-sm text-muted-foreground transition-colors hover:text-accent-foreground peer-disabled:opacity-50 peer-disabled:pointer-events-none peer-disabled:cursor-not-allowed peer-[[type=text]]:[&:nth-child(1)]:[&_svg]:hidden peer-[[type=password]]:[&:nth-child(2)]:[&_svg]:hidden"
      data-part="field-password-toggle"
      onclick="this.previousElementSibling.type = this.previousElementSibling.type === 'password' ? 'text' : 'password'"
    >
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"/><circle cx="12" cy="12" r="3"/></svg>
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49"/><path d="M14.084 14.158a3 3 0 0 1-4.242-4.242"/><path d="M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143"/><path d="m2 2 20 20"/></svg>
    </button>
  </div>
  {descriptionHtml && (
    <p
      data-part="field-description"
      class="mt-2 text-xs text-muted-foreground"
      role="region"
      aria-live="polite"
    >
      <Fragment set:html={descriptionHtml} />
    </p>
  )}
</div>
